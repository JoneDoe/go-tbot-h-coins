package app

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	api "go-tbot-h-coins/src/api"
	blockchain "go-tbot-h-coins/src/blockchain"

	tgbotapi "gopkg.in/telegram-bot-api.v4"
)

var request Request
var transaction CoinsTransaction
var transactionPending map[int]string

// Init bot
func (telegramBot *TelegramBot) Init() {
	botAPI, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_BOT_API_KEY")) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
	if err != nil {
		log.Fatal(err)
	}

	//botAPI.Debug = true

	log.Printf("Authorized on account %s", botAPI.Self.UserName)

	telegramBot.API = botAPI
	botUpdate := tgbotapi.NewUpdate(0) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	botUpdate.Timeout = 64
	botUpdates, err := telegramBot.API.GetUpdatesChan(botUpdate)
	if err != nil {
		log.Fatal(err)
	}
	telegramBot.Updates = botUpdates

	Handler.bc = blockchain.NewBlockchain()
}

// Start bot
func (telegramBot *TelegramBot) Start() {

	transactionPending = make(map[int]string)

	for update := range telegramBot.Updates {
		//log.Println(update.Message.Contact)
		if update.CallbackQuery != nil {
			request.Callback = update.CallbackQuery
			telegramBot.callbackHandler()
		} else if update.Message != nil {
			request.ID = update.Message.Chat.ID

			if update.Message.IsCommand() {
				request.Cmd = update.Message.Command()
				telegramBot.commandHandler()
			} else {
				request.Msg = update
				// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å  -> –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
				telegramBot.updateHandler()
			}
		}
	}
}

func (telegramBot *TelegramBot) btnClickHandler() {
	command := request.Msg.Message.Text

	fmt.Println(fmt.Sprintf("Bot btnClickHandler %s", command))

	switch command {
	case BTN_COINS:
		telegramBot.drawCoinsMenu(tgbotapi.NewMessage(request.ID, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å"))
	case BTN_COINS_BALANCE:
		telegramBot.execCoinBalance()
	case BTN_COINS_SEND:
		telegramBot.drawCoinsChooseMenu()
	case BTN_COINS_BACK:
		telegramBot.drawUserMenu()
	case BTN_VOCATIONS:
		msg := tgbotapi.NewMessage(request.ID, "0 –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞, –ø—Ä–∏–π–¥–µ—Ç—Å—è –ø–æ-–ø–∞—Ö–∞—Ç—å –µ—â–µ, –¥—Ä—É–∂–æ–∫ üòà")
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(false)
		telegramBot.API.Send(msg)
		telegramBot.drawUserMenu()
	}
}

func (telegramBot *TelegramBot) callbackHandler() {
	callbackData := request.Callback.Data

	log.Println("Choose case", callbackData)

	callbackCommand := strings.Split(callbackData, ".")

	switch callbackCommand[0] {
	case "amount":
		if _, exists := transactionPending[request.Callback.From.ID]; exists {
			//log.Println(request.Callback.From.FirstName)
			transaction.Sender = request.Callback.From.FirstName
			transaction.Amount, _ = strconv.Atoi(callbackCommand[1])

			text := telegramBot.execTransferCoins(transaction)
			telegramBot.drawCoinsMenu(tgbotapi.NewMessage(request.ID, text))

			delete(transactionPending, request.Callback.From.ID)
		}
	default:
		transaction.Recipient = callbackData
		transactionPending[request.Callback.From.ID] = callbackData

		//telegramBot.API.Send(tgbotapi.NewMessage(request.Callback.Message.Chat.ID, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å "+callbackData))
		telegramBot.drawCoinsChooseAmount()
	}
}

func (telegramBot *TelegramBot) execTransferCoins(transaction CoinsTransaction) (text string) {
	if err := Handler.CoinsTransfer(transaction); err != nil {
		text = fmt.Sprintf("–Ø –±—ã –ø–µ—Ä–µ–≤–µ–ª —Ç–≤–æ–∏ %d –∫–æ–∏–Ω–æ–≤ %s, –Ω–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Ö ü§°, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å", transaction.Amount, transaction.Recipient)
	} else {
		text = fmt.Sprintf("–¢—ã –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª %d –∫–æ–∏–Ω–æ–≤ %s", transaction.Amount, api.GetUserList()[transaction.Recipient])
	}

	return
}

func (telegramBot *TelegramBot) updateHandler() {
	chatID := request.ID

	if User.Find(chatID) { // –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î?
		telegramBot.btnClickHandler()
		telegramBot.analyzeUser()
	} else {
		User.Create(chatID)          // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		telegramBot.requestContact() // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
	}
}

// func (telegramBot *TelegramBot) findUser(chatID int64) bool {
// 	find := Connection.Find(chatID)
// 	return find
// }

// func (telegramBot *TelegramBot) createUser(user teUser) {
// 	err := Connection.CreateUser(user)
// 	if err != nil {
// 		msg := tgbotapi.NewMessage(user.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
// 		telegramBot.API.Send(msg)
// 	}
// }

func (telegramBot *TelegramBot) requestContact() {
	// –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	requestContactMessage := tgbotapi.NewMessage(request.ID, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ?")
	// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
	acceptButton := tgbotapi.NewKeyboardButtonContact("–î–∞")
	declineButton := tgbotapi.NewKeyboardButton("–ù–µ—Ç")
	// –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	requestContactMessage.ReplyMarkup = tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{acceptButton, declineButton})
	telegramBot.API.Send(requestContactMessage) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

	telegramBot.addContactRequestID() // –î–æ–±–∞–≤–ª—è–µ–º ChatID –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
}

func (telegramBot *TelegramBot) addContactRequestID() {
	telegramBot.ActiveContactRequests = append(telegramBot.ActiveContactRequests, request.ID)
}

func (telegramBot *TelegramBot) analyzeUser() {
	chatID := request.ID
	user := User.Get(chatID) // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞
	// if err != nil {
	// 	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
	// 	telegramBot.API.Send(msg)
	// 	return
	// }
	if len(user.PhoneNumber) > 0 {
		//telegramBot.drawUserMenu()
		// msg := tgbotapi.NewMessage(chatID, "–í–∞—à –Ω–æ–º–µ—Ä: "+user.PhoneNumber) // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø–∏—à–µ–º –µ–≥–æ
		// telegramBot.API.Send(msg)
		return
	} else if telegramBot.findContactRequestID() {
		// –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∂–¥—ë–º –ª–∏ –º—ã –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç —ç—Ç–æ–≥–æ ChatID
		telegramBot.checkRequestContactReply() // –ï—Å–ª–∏ –¥–∞ -> –ø—Ä–æ–≤–µ—Ä—è–µ–º
		return
	} else {
		telegramBot.requestContact() // –ï—Å–ª–∏ –Ω–µ—Ç -> –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
		return
	}
}

func (telegramBot *TelegramBot) drawUserMenu() {
	msg := tgbotapi.NewMessage(request.ID, "–ú–µ–Ω—é –ø–æ–∂–µ–ª–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, —á–µ–≥–æ –ø–æ–∂–µ–ª–∞–µ—Ç —Ç–≤–æ—è –¥—É—à–∞?")

	// –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton(BTN_COINS),
		tgbotapi.NewKeyboardButton(BTN_VOCATIONS)})
	telegramBot.API.Send(msg)
}

func (telegramBot *TelegramBot) drawCoinsChooseMenu() {
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	for key, recipient := range api.GetUserList() {
		var row []tgbotapi.InlineKeyboardButton
		btn := tgbotapi.NewInlineKeyboardButtonData(recipient, key)
		row = append(row, btn)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}

	msg := tgbotapi.NewMessage(request.ID, "–í—ã–±–µ—Ä–∏ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–≤–æ–∏ H-coins")
	msg.ReplyMarkup = keyboard
	telegramBot.API.Send(msg)
}

func (telegramBot *TelegramBot) drawCoinsChooseAmount() {
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	var row []tgbotapi.InlineKeyboardButton

	for key, amount := range Amounts {
		btn := tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(amount), key)
		row = append(row, btn)
	}

	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	msg := tgbotapi.NewMessage(request.ID, "–°–∫–æ–ª—å–∫–æ H-coins –±—É–¥–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å?")
	msg.ReplyMarkup = keyboard
	telegramBot.API.Send(msg)
}

func (telegramBot *TelegramBot) drawCoinsMenu(msg tgbotapi.MessageConfig) {
	row1 := []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton(BTN_COINS_BALANCE),
		tgbotapi.NewKeyboardButton(BTN_COINS_SEND)}

	row2 := []tgbotapi.KeyboardButton{tgbotapi.NewKeyboardButton(BTN_COINS_BACK)}
	// –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(row1, row2)

	telegramBot.API.Send(msg)
}

// CommandHandler handle commands from message
func (telegramBot *TelegramBot) commandHandler() {
	command := request.Msg.Message.Text

	fmt.Println(fmt.Sprintf("Bot command %s", command))
}

func (telegramBot *TelegramBot) execCoinBalance() {
	account := api.GetCoins(User.Get(request.ID).PhoneNumber)
	msg := tgbotapi.NewMessage(request.ID, fmt.Sprintf("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É %d –∫–æ–∏–Ω–æ–≤", account.Balance))
	telegramBot.API.Send(msg)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
func (telegramBot *TelegramBot) checkRequestContactReply() {
	chatID := request.ID
	message := request.Msg.Message

	if message.Contact != nil { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç
		if message.Contact.UserID == message.From.ID { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
			err := User.Update(teUser{chatID, message.Contact.PhoneNumber}) // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
				telegramBot.API.Send(msg)
				return
			}

			telegramBot.deleteContactRequestID() // –£–¥–∞–ª—è–µ–º ChatID –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
			msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ!")
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(false) // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			telegramBot.API.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–µ –≤–∞–º!")
			telegramBot.API.Send(msg)
			telegramBot.requestContact()
		}
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π!")
		telegramBot.API.Send(msg)
		telegramBot.requestContact()
	}
}

// –ï—Å—Ç—å ChatID –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è?
func (telegramBot *TelegramBot) findContactRequestID() bool {
	for _, v := range telegramBot.ActiveContactRequests {
		if v == request.ID {
			return true
		}
	}
	return false
}

// –£–¥–∞–ª–µ–Ω–∏–µ ChatID –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
func (telegramBot *TelegramBot) deleteContactRequestID() {
	for i, v := range telegramBot.ActiveContactRequests {
		if v == request.ID {
			copy(telegramBot.ActiveContactRequests[i:], telegramBot.ActiveContactRequests[i+1:])
			telegramBot.ActiveContactRequests[len(telegramBot.ActiveContactRequests)-1] = 0
			telegramBot.ActiveContactRequests = telegramBot.ActiveContactRequests[:len(telegramBot.ActiveContactRequests)-1]
		}
	}
}
